//- element.pug
extends layout.pug

block title
  title= __( 'element-title', element.names[ locale ] ) + " — " + __( 'title' )
  if text.description
    meta( name="description", content=text.description )/

block social
  meta( property="og:title", content=element.names[ locale ] )/
  if text.description
    meta( property="og:description", content=text.description )/
  if element.image
    meta( property="og:image", content=element.image.url )/

block styles
  link( rel="stylesheet", href="/css/element.css" )/
  link( rel="stylesheet", href="/css/microtable.css" )/

block content
  div.pt-element
    //- main
    div.pt-element-container
      //- element intro
      div.pt-box.pt-element-intro
        //- element title
        h1.element--title
          span.element--symbol
            span.symbol--number= element.number
            span.symbol--label= element.symbol
          span.element--name= element.names[ locale ]
          div.pt-actions.element--actions
            if nav.prev
              a( href="/e/" + elements[ nav.prev ].symbol, title= __( 'navigation-prev' ) )
                i.icon arrow_back
            a( href="/", title= __( 'title' ) )
              i.icon apps
            if nav.next
              a( href="/e/" + elements[ nav.next ].symbol, title= __( 'navigation-next' ) )
                i.icon arrow_forward
            a(
              href="data:text/json;charset=utf-8," + encodeURIComponent( JSON.stringify( element ) ),
              download="data.json", title= __( 'download' )
            )
              i.icon download
            a( href="javascript:window.print();", title= __( 'print' ) )
              i.icon print
        //- element (summary) text
        if text.text
          div.pt-element-summary
            div.pt-element-summary-text!= text.text
            div.pt-element-summary-credits!= __( 'wiki-credits', 'https://wikipedia.org/wiki/' + locale + ':' + element.wiki[ locale ] )
      //- element properties
      //- atomic properties
      div.pt-box.pt-element-properties
        h2= __( 'prop-atomic' )
        table.pt-prop-table.pt-element-table
          tbody
            if element.atomic_mass
              tr.pt-prop-table-row
                th.pt-prop-table-label
                  a( href="/scale/atomic_mass" )= __( 'atomic-mass' )
                td.pt-prop-table-value!= core.fNumber( element.atomic_mass, locale )
            if element.radius
              each prop, label in element.radius
                tr.pt-prop-table-row
                  th.pt-prop-table-label
                    a( href="/scale/radius_" + label )= __( label + '-radius' )
                  td.pt-prop-table-value!= core.fNumber( prop, locale )
            if element.electron_config
              tr.pt-prop-table-row
                th.pt-prop-table-label= __( 'electron-config' )
                td.pt-prop-table-value!= core.fText( element.electron_config )
            if element.ionization
              tr.pt-prop-table-row
                th.pt-prop-table-label= __( 'ionization-energy' )
                td.pt-prop-table-value!= core.fNumber( element.ionization, locale )
      //- physical properties
      div.pt-box.pt-element-properties
        h2= __( 'prop-physical' )
        table.pt-prop-table.pt-element-table
          tbody
            tr.pt-prop-table-row
              th( colspan="2" ).pt-prop-table-label= __( 'temperatures' )
            each prop in [ 'melting', 'boiling', 'liquid_range', 'triple', 'critical' ]
              if element[ prop ]
                tr.pt-prop-table-row
                  th.pt-prop-table-label
                    a( href="/scale/" + prop )= __( prop + '-temp' )
                  td.pt-prop-table-value!= core.fNumber( element[ prop ], locale )
      //- chemical properties
      div.pt-box.pt-element-properties
        h2= __( 'prop-chemical' )
        table.pt-prop-table.pt-element-table
          tbody
            if element.oxidation
              tr.pt-prop-table-row
                th.pt-prop-table-label= __( 'oxidation-state' )
                td.pt-prop-table-value!= element.oxidation.join( ', ' )
            if element.electrode_potential
              tr.pt-prop-table-row
                th.pt-prop-table-label= __( 'electrode-potential' )
                td.pt-prop-table-value!= core.fNumber( element.electrode_potential, locale )
            if element.negativity
              tr.pt-prop-table-row
                th( colspan="2" ).pt-prop-table-label= __( 'electronegativity' )
              each prop, label in element.negativity
                tr.pt-prop-table-row
                  th.pt-prop-table-label
                    a( href="/scale/" + label )= __( label + '-negativity' )
                  td.pt-prop-table-value!= core.fNumber( prop, locale )
      //- other properties
      div.pt-box.pt-element-properties
        h2= __( 'prop-other' )
      //- isotopes
      div.pt-box.pt-element-properties
        h2= __( 'prop-isotopes' )
    //- aside
    aside.pt-element-aside
      //- element image
      if element.image
        div.pt-box.pt-element-image
          a( href=element.image.url, target="_blank" )
            img( src=element.image.url, loading="lazy" )/
          figcaption!= element.image.caption
      //- element info
      div.pt-box.pt-element-quickinfo
        h2= __( 'quickinfo' )
        table.pt-prop-table.pt-element-table
          tbody
            each prop in [ 'group', 'period', 'set', 'block' ]
              if element[ prop ]
                tr.pt-prop-table-row
                  th.pt-prop-table-label= __( prop + '-label' )
                  td.pt-prop-table-value
                    a( href="/list/" + prop + "/" + element[ prop ] )= __( prop + '-' + element[ prop ] )
      //- radioactive warning
      if element.radioactive
        div.pt-box.pt-box-flex.pt-element-radioactive
            img.pictogram-small( src="/img/radioactive.png", loading="lazy" )/
            b= __( 'element-radioactive' )
      //- hazard classification
      if element.hazardous
        div.pt-box.pt-element-hazard
          h2= __( 'ghs-title' )
          if element.hazardous.ghs
            div.pt-box-flex.pt-box-columns.pt-element-hazard-box
              each ghs in element.hazardous.ghs
                div.pt-element-hazard-item
                  img.pictogram( src="/img/GHS" + ghs + ".png", loading="lazy" )/
                  span!= __( 'ghs-' + ghs )
          else
            i= __( 'ghs-undefined' )
          div.pt-element-hazard-statements
            h3= __( 'hazard-precautionary' )
            div.hazard--statements
              div.hazard--line
                b H
                if element.hazardous.h
                  span!= element.hazardous.h.join( ', ' )
                else
                  i= __( 'hazard-precautionary-undefined' )
              div.hazard--line
                b P
                if element.hazardous.p
                  span!= element.hazardous.p.join( ', ' )
                else
                  i= __( 'hazard-precautionary-undefined' )
          if element.hazardous.nfpa
            h3= __( 'nfpa-title' )
            div.pt-box-flex.pt-nfpa
              div.pt-nfpa-diamond
                each key in [ 'h', 'f', 'i', 's' ]
                  div( class=key, style="--code:" + key )
                    each code in ( element.hazardous.nfpa[ key ] || '—' ).split( '|' )
                      b( code=code )= code
              div.pt-nfpa-info
                each key in [ 'h', 'f', 'i', 's' ]
                  div.pt-nfpa-info-line
                    b= __( 'nfpa-' + key )
                    each code in ( element.hazardous.nfpa[ key ] || 'undefined' ).split( '|' )
                      span!= __( 'nfpa-' + key + '-' + code )
          if element.hazardous.hazard
            h3= __( 'pictogram-title' )
            div.pt-element-hazard-pictograms
              each hazard in element.hazardous.hazard
                img.pictogram-small( src="/img/hazard-" + hazard + ".png", loading="lazy" )/
          if element.hazardous.adr
            h3= __( 'adr-title' )
            div.pt-element-hazard-pictograms
              each adr in element.hazardous.adr
                img.pictogram( src="/img/ADR-" + adr + ".png", loading="lazy" )/
      //- element classification
      if element.classification
        div.pt-box.pt-element-classification
          h2= __( 'classification' )
          div.pt-box-flex.pt-box-columns
            each classif in [ 'cas', 'eg', 'echa', 'atc' ]
              if element.classification[ classif ]
                div.pt-element-classification-item
                  b= __( 'classification-' + classif )
                  each c in element.classification[ classif ]
                    span.pt-element-classification-line
                      if classif == 'eg'
                        span= c.value
                      else
                        a.external(
                          href!= core.classifLink( classif, c.value ),
                          target="_blank"
                        )= c.value
                      if c.label && c.label.length
                        span!= "&nbsp;(" + core.fText( c.label ) + ")"
    //- footer
    div.pt-element-footer
      //- tpl:microtable
      include templates/microtable.pug